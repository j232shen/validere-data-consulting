---
title: "Mom-and-pop Investment Strategies: Simulation & Evaluation"
author: "Jane Shen"
format: html
editor: visual
---

```{r}
#| label: setup
#| message: False

library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(CVXR)
library(xts)
library(zoo)
```

## Get data

```{r}
#| label: process-assets

# load data retrieval and preprocessing module
source("ETL.R")

# fixed asset universe
# VTI: all public U.S. stocks
# VXUS: most non-U.S. stocks
# BND: broad U.S. investment-grade bonds
# BNDX: broad non-U.S. bonds

start_date <- "2013-06-05" # inception date for BNDX
end_date <- "2025-06-30"

tickers <- list(VTI = "VTI", VXUS = "VXUS", BND = "BND", BNDX = "BNDX")

# get returns and adjusted close prices
clean_returns <- get_all_log_returns(tickers, from = start_date, to = end_date)
clean_prices <- get_all_adj_close(tickers, from = start_date, to = end_date)

# check column names
colnames(clean_returns)
```

## Define portfolio allocations + optimizate

```{r}
#| label: simulation-setup

# load optimization and DCA simulation module
source("simulation.R")

# load performance metrics metrics module
source("calculate_metrics.R")

# define monthly cash inflow
cf = 3000 
```

### 60/40 equities to bonds

```{r}
#| label: optimize-60-40
#| message: False

# create portfolio specification
spec_60_40 <- portfolio.spec(assets = colnames(clean_returns))

# add full investment constraint
spec_60_40 <- add.constraint(spec_60_40, type = "full_investment")

# add group constraints
spec_60_40 <- add.constraint(spec_60_40, type = "group",
                             groups = list(equities = c(1, 2),  # US + global equities
                                           bonds = c(3, 4)),    # US + global bonds
                             group_min = c(0.58, 0.38),         # 60% equities, 40% bonds with some flexibility
                             group_max = c(0.62, 0.42))

# add nested constraints within asset class allocation
spec_60_40 <- add.constraint(spec_60_40, type = "group",  
                             groups = list(VTI = 1, VXUS = 2, BND = 3, BNDX = 4),  
                             group_min = c(0.34, 0.22, 0.26, 0.10), 
                             group_max = c(0.38, 0.26, 0.30, 0.14))

# add objectives: maximize mean return while minimizing var
spec_60_40 <- add.objective(spec_60_40, type = "return", name = "mean")  
spec_60_40 <- add.objective(spec_60_40, type = "risk", name = "ES")

# run optmization
results_60_40 <- optimize_portfolio(clean_returns, spec_60_40)
```

```{r}
#| label: dca-60-40

# DCA simulation
dca_60_40 <- simulate_dca(clean_prices, results_60_40$weights, inflow_amount = cf, initial_cash = 0)

# plot portfolio value
# plot(dca_60_40, main = "Portfolio Value with Dollar Cost Averaging") # , ylab = "Portfolio Value ($)")

# manually calculate drawdowns from portfolio values
drawdowns_60_40 <- calculate_drawdowns(dca_60_40)
# plot(drawdowns_60_40, main = "Drawdowns (DCA Portfolio)", ylab = "Drawdown", xlab = "Date")

# calculate IRR (money-adjusted return)
irr_60_40 <- calculate_irr(dca_60_40, monthly_contribution = cf)
print(irr_60_40)
```

Sanity check:

```{r}
#| label: sanity-check

inflow_amount = cf
dca_portfolio <- dca_60_40
weights_xts <- results_60_40$weights
prices_xts <- clean_prices

# 1. Total invested
cat("Total invested:", inflow_amount * length(index(weights_xts)), "\n")

# 2. Final portfolio value
cat("Final portfolio value:", as.numeric(tail(dca_portfolio, 1)), "\n")

# 3. Price range
print(range(prices_xts, na.rm = TRUE))

# 4. Weight range
print(range(weights_xts, na.rm = TRUE))

# 5. Any NAs or zeros in prices?
cat("Any NAs in prices:", any(is.na(prices_xts)), "\n")
cat("Any zeros in prices:", any(prices_xts == 0, na.rm = TRUE), "\n")

# 6. Any NAs or negatives in weights?
cat("Any NAs in weights:", any(is.na(weights_xts)), "\n")
cat("Any negatives in weights:", any(weights_xts < 0, na.rm = TRUE), "\n")
```

Compare to static weights

```{r}
#| label: static-60-40

# static weights matrix (no rebalancing) for comparison
rebalance_dates <- index(results_60_40$weights)

static_weights <- matrix(
  c(0.36, 0.24, 0.28, 0.12),  # VTI, VXUS, BND, BNDX
  nrow = length(rebalance_dates),
  ncol = 4,
  byrow = TRUE
)
colnames(static_weights) <- c("VTI", "VXUS", "BND", "BNDX")
static_weights_xts <- xts(static_weights, order.by = rebalance_dates)

dca_static_60_40 <- simulate_dca(clean_prices, static_weights_xts, inflow_amount = cf, initial_cash = 0)

# compare IRR
calculate_irr(dca_static_60_40, monthly_contribution = cf)
```

### 100% equity

```{r}
#| label: optimize-full-equity
#| message: False

# create portfolio specification
spec_full_equity <- portfolio.spec(assets = colnames(clean_returns)[1:2])  # only equities

# add full investment constraint
spec_full_equity <- add.constraint(spec_full_equity, type = "full_investment")

# add group constraints
spec_full_equity <- add.constraint(spec_full_equity, type = "group",
                                   groups = list(VTI = 1, VXUS = 2),
                                   group_min = c(0.58, 0.38),  # 60% US, 40% global
                                   group_max = c(0.62, 0.42))

# add objectives: maximize mean return while minimizing var
spec_full_equity <- add.objective(spec_full_equity, type = "return", name = "mean")  
spec_full_equity <- add.objective(spec_full_equity, type = "risk", name = "ES")

# run optmization
results_full_equity <- optimize_portfolio(clean_returns, spec_full_equity)
```

```{r}
#| label: dca-full-equity

# DCA simulation
equity_prices <- clean_prices[, c("VTI", "VXUS")]  # subset equity prices
dca_full_equity <- simulate_dca(equity_prices, results_full_equity$weights, inflow_amount = cf, initial_cash = 0)

# plot results
# plot(dca_full_equity, main = "Portfolio Value with Dollar Cost Averaging") # , ylab = "Portfolio Value ($)")

# manually calculate drawdowns from portfolio values
drawdowns_full_equity <- calculate_drawdowns(dca_full_equity)
# plot(drawdowns_full_equity, main = "Drawdowns (DCA Portfolio)", ylab = "Drawdown", xlab = "Date")

# calculate IRR (money-adjusted return)
irr_full_equity <- calculate_irr(dca_full_equity, monthly_contribution = cf)
print(irr_full_equity)
```

Compare to static weights

```{r}
#| label: static-full-equity

# static weights matrix for 100% equity comparison
equity_rebalance_dates <- index(results_full_equity$weights)

# create static weights matrix (60% VTI, 40% VXUS - same for all periods)
static_equity_weights <- matrix(
  c(0.6, 0.4),  # VTI, VXUS
  nrow = length(equity_rebalance_dates),
  ncol = 2,
  byrow = TRUE
)
colnames(static_equity_weights) <- c("VTI", "VXUS")
static_equity_weights_xts <- xts(static_equity_weights, order.by = equity_rebalance_dates)

# run DCA simulation with static weights
dca_static_equity <- simulate_dca(clean_prices[, c("VTI", "VXUS")], 
                                            static_equity_weights_xts, 
                                            inflow_amount = cf, initial_cash = 0)

# calculate IRR for static allocation
print("Static Full Equity IRR:")
calculate_irr(dca_static_equity, monthly_contribution = cf)

# Compare with optimized version
print("Optimized Full Equity IRR:")
calculate_irr(dca_full_equity, monthly_contribution = cf)
```

### 100% MTUM

```{r}
#| label: lump-sum-mtum
#| message: False

# LUMP SUM INVESTMENT
MTUM_returns <- get_all_log_returns(list("MTUM"), from = start_date, to = end_date)
colnames(MTUM_returns)

# create a weight matrix that's always 100% MTUM
mtum_dates <- index(MTUM_returns)  
mtum_weights <- xts(matrix(1, nrow=length(mtum_dates), ncol=1), order.by=mtum_dates)  
colnames(mtum_weights) <- "MTUM"  

# get "rebalanced" returns for consistency
MTUM_portfolio <- Return.rebalancing(MTUM_returns, mtum_weights)
```

```{r}
#| label: dca-mtum

# get the rebalancing dates from optimized portfolio
rebalance_dates <- index(results_60_40$weights)  # weights_xts from your optimized portfolio

# get adjusted close prices for MTUM and subset to rebalance dates
mtum_prices_full <- get_all_adj_close(list("MTUM"), from = start_date, to = end_date)
mtum_prices <- mtum_prices_full[rebalance_dates, "MTUM", drop = FALSE]

# weights always 1 for MTUM
mtum_weights <- xts(matrix(1, nrow=nrow(mtum_prices), ncol=1), order.by=index(mtum_prices))
colnames(mtum_weights) <- "MTUM"

# DCA simulation
dca_mtum <- simulate_dca(mtum_prices, mtum_weights, inflow_amount = cf, initial_cash = 0)

# plot results
# plot(dca_mtum, main = "Portfolio Value with Dollar Cost Averaging") # , ylab = "Portfolio Value ($)")

# manually calculate drawdowns from portfolio values
drawdowns_mtum <- calculate_drawdowns(dca_mtum)
# plot(drawdowns_mtum, main = "Drawdowns (DCA Portfolio)", ylab = "Drawdown", xlab = "Date")

# calculate IRR (money-adjusted return)
irr_mtum <- calculate_irr(dca_mtum, monthly_contribution = cf)
print(irr_mtum)
```

### Vanguard Target Retirement 2025 Fund

```{r}
#| label: lump-sum-vttvx
#| message: False

# LUMP SUM INVESTMENT
VTTVX_returns <- get_all_log_returns(list("VTTVX"), from = start_date, to = end_date)
colnames(VTTVX_returns)

# create a weight matrix that's always 100% VTTVX
vttvx_dates <- index(VTTVX_returns)  
vttvx_weights <- xts(matrix(1, nrow=length(vttvx_dates), ncol=1), order.by=vttvx_dates)  
colnames(vttvx_weights) <- "VTTVX"  

# get "rebalanced" returns for consistency
VTTVX_portfolio <- Return.rebalancing(VTTVX_returns, vttvx_weights)
```

```{r}
#| label: dca-vttvx

# get the rebalancing dates from optimized portfolio
rebalance_dates <- index(results_60_40$weights)  # weights_xts from your optimized portfolio

# get adjusted close prices for MTUM and subset to rebalance dates
vttvx_prices_full <- get_all_adj_close(list("VTTVX"), from = start_date, to = end_date)
vttvx_prices <- vttvx_prices_full[rebalance_dates, "VTTVX", drop = FALSE]

# weights always 1 for MTUM
vttvx_weights <- xts(matrix(1, nrow=nrow(vttvx_prices), ncol=1), order.by=index(vttvx_prices))
colnames(vttvx_weights) <- "VTTVX"

# DCA simulation
dca_vttvx <- simulate_dca(vttvx_prices, vttvx_weights, inflow_amount = cf, initial_cash = 0)

# plot results
# plot(dca_vttvx, main = "Portfolio Value with Dollar Cost Averaging") # , ylab = "Portfolio Value ($)")

# manually calculate drawdowns from portfolio values
drawdowns_vttvx <- calculate_drawdowns(dca_vttvx)
# plot(drawdowns_vttvx, main = "Drawdowns (DCA Portfolio)", ylab = "Drawdown", xlab = "Date")

# calculate IRR (money-adjusted return)
irr_vttvx <- calculate_irr(dca_vttvx, monthly_contribution = cf)
print(irr_vttvx)
```

## Group portfolios and simulate DCA

```{r}
#| label: plot-dca

# set up plotting parameters
my_colors <- c("black", "red", "green", "blue")
my_legend <- c("100% Momentum", "100% Equity", "60/40", "Vanguard Target 2025 Fund")

# combine portfolio values
portfolio_values <- merge(dca_mtum,
                          dca_full_equity, 
                          dca_60_40, 
                          dca_vttvx, 
                          all = FALSE)
colnames(portfolio_values) <- my_legend

# combine drawdowns
portfolio_drawdowns <- merge(drawdowns_mtum, 
                             drawdowns_full_equity, 
                             drawdowns_60_40, 
                             drawdowns_vttvx, 
                             all = FALSE)
colnames(portfolio_drawdowns) <- my_legend

# subplot layout
par(mfrow = c(2, 1), mar = c(3, 4, 3, 2))

# top plot: Portfolio Values
plot.xts(
  portfolio_values,
  main = "Portfolio Value Growth Over Time",
  # ylab = "Portfolio Value ($)",
  col = my_colors,
  lwd = 2,
  legend.loc = "topleft",
  legend.names = my_legend,
  major.ticks = "years",
  grid.col = "lightgray"
)

# bottom plot: drawdowns
plot.xts(
  portfolio_drawdowns * 100,  # convert to percentage
  main = "Portfolio Drawdowns",
  ylab = "Drawdown (%)",
  xlab = "Date",
  col = my_colors,
  lwd = 2,
  legend.loc = "bottomleft",
  legend.names = my_legend,
  major.ticks = "years",
  grid.col = "lightgray"
)

# reset plotting parameters
par(mfrow = c(1, 1), mar = c(5, 4, 4, 2))
```

## Calculate risk metrics

```{r}
#| label: risk-metrics

# compare all your strategies
portfolios <- list(dca_mtum, dca_full_equity, dca_60_40, dca_vttvx)
irrs <- list(irr_mtum$annual, irr_full_equity$annual, irr_60_40$annual, irr_vttvx$annual)
names <- c("100% Momentum", "100% Equity", "60/40", "Vanguard Target 2025")

risk_table <- create_risk_comparison(portfolios, irrs, names)
print(risk_table)
```
